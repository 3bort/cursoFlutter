//Sitio web para realizar los ejercicios https://dartpad.dartlang.org/?id

//01 Hola Mundo

void main(){
  print('Hola Mundo');
}


//02 Tipos de datos Strings y números

void main(){
  
  // Strings
  //String nombre = 'Tony';
  //String apellido = 'Stark';
  
  //Flexible Var
  //var nombre = 'Tony';
  //var apellido = 'Stark';
  
  
  // Como constante aunque en flutter también existen las constantes, no es posible 
  // cambiar
  //final String nombre = 'Tony';
  //final String apellido = 'Stark';
  
  
  //Constante nunca cambia en su tiempo de compilación
  
  const nombre = 'Tony';
  const apellido = 'Stark';
  
  
  //nombre = 'Peter';

  print('$nombre $apellido'); //Template String
  
  
  //Números
  
  int empleados = 10;
  double salario = 1800.25;

  print (empleados);
  print (salario);
  
  
}


//03 Tipo de datos Booleanos y Condicionales

void main(){
  
  bool isActive = true;
  
  if(!isActive){
    print('Está activo');
  }else{
    print('Esta inactivo');
  }
  
}

void main(){
  
  //Null Safety
  
  bool? isActive = null; //con ? le indicamos que puede ser null
  
  if(isActive == null){
    print('isActive es null');
  }else{
    print('No es null');
  }
  
}


//04 Tipo de datos Lista

//List? numeros = [];
  //List numeros = [1,2,3,4,5,6,7,8,9,10];
  //numeros.add(11);
  //print (numeros[0]);
  
  
  //Cómo está en dinamico, podemos tener el problema de meter string es por ello, es
  //bueno meter el tipo de dato, ya que en este ejemplo meteria también el String
  
  /*
  List numeros = [1,2,3,4,5,6,7,8,9,10];
  numeros.add('Fernando');
  print (numeros);
  
  */
  
  
  //Así añadimos el tipo a la Lista
  List<int> numeros = [1,2,3,4,5,6,7,8,9,10];
  numeros.add(11);
  print (numeros);
  
  
  //Método estatico de las listas
  final masNumeros = List.generate(100, (int index) => 10);
  print (masNumeros);


  //05 Tipo de datos Map

  void main() {
  /*
  Map persona = {
    'nombre': 'Fernando',
    'edad': 35,
    'soltero': true,
    true: false,
    1: 100,
    2: 500
  };
  //print(persona);
  //print (persona['nombre']);
  //print (persona[true]);
  print(persona[2]);
  
  */
  
  //En los mapa es bueno añadir el tipo de dato
  /*
  Map persona = {
    'nombre': 'Fernando',
    'edad': 35,
    'soltero': true,
    true: false,
    1: 100,
    2: 500
  };
  
  persona.addAll({3:'Juan'});
  
  print(persona);
  */
  
  //Tipo de datos de variable y valor
  
  Map<String, dynamic> persona = {
    'nombre': 'Fernando',
    'edad': 35,
    'soltero': true,
  };
  
  persona.addAll({'segundoNombre':'Juan'});
  
  print(persona);
  
  
  
}


//05 Funciones Dart y uso de required

/*
void main() {
  
  final nombre = 'Fernando';
  
  saludar(nombre);
  }


void saludar( String  x){
  print('Hola $x');
 
 
}


void main() {
  
   final nombre = 'Fernando';
  saludar();
  
  }
void saludar([String nombre = 'No name']) {
  print('Hola $nombre');

}

*/

void main() {
  
  final nombre = 'Fernando';
  
  //saludar(nombre, 'Greetings');
  
  //saludar2(mensaje: 'Hi', nombre: nombre);
  
  saludar2(nombre: nombre,  mensaje: 'Greetings');
  
}
  
void saludar(String nombre, [String mensaje = 'Hi']) {
  print('$mensaje $nombre');

}


void saludar2({
  required String nombre, 
  required String? mensaje,
  }) {
  print('$mensaje $nombre');
}


//06 Clases

// 6.1 Ejemplo instanciado

void main() {
  
  final wolverine = new Heroe(); //New es opcional (pero recomendado)
  
  wolverine.nombre = 'Logan';
  wolverine.poder = 'Regeneración';
  
  print (wolverine);
  
}


class Heroe {
  
  String? nombre;
  String? poder;
  
  @override //es opcional, pero sirve para indicar que queremos sobreescribir esas variables
  String toString(){
    return 'Heroe: nombre : ${this.nombre}, poder: ${this.poder}'; //this hace referencia al nombre de la instancia
    
  }
  
}

//6.2 Ejemplo clase con constructor


void main() {
  
  final wolverine = new Heroe('Logan', 'Regeneración'); //Hay que pasar los valores
  
  print (wolverine);
  
}


class Heroe {
  
  String? nombre;
  String? poder;
  
  /*
  Heroe(String pNombre, String pPoder){ //Este sería el construcctor de la clase que tiene el mismo nombre que la clase
    this.nombre = pNombre;
    this.poder = pPoder;
  }
  */
  
  Heroe(this.nombre, this.poder); //Forma más rápida de crear el constructor sin necesidad de asignación
  
  
  String toString(){
    return 'Heroe: nombre : ${this.nombre}, poder: ${this.poder}'; 
    
  }
  
}


//6.3 Ejemplo con la obligación de mandar los datos

void main() {
  
  final wolverine = new Heroe(nombre: 'Logan', poder: 'Regeneración'); //Hay que pasar los valores
  
  print (wolverine);
  
}


class Heroe {
  
  String nombre;
  String poder;
  
  
  Heroe({
    required this.nombre, //con required siempre obligas a mandar los datos
    required this.poder
  });
  
  
 
  
  String toString(){
    return 'Heroe: nombre : ${this.nombre}, poder: ${this.poder}'; 
    
  }
  
}

//07 Constructores con Nombre

void main() {
  final rawJson = {'nombre': 'Tony Stark', 'poder': 'Dinero'};

  //final ironman = new Heroe(nombre: rawJson['nombre']!, poder: rawJson['poder']!);
  //print(ironman);

  /*
  
  final wolverine = new Heroe(
      nombre: 'Logan', poder: 'Regeneración'); //Hay que pasar los valores

  print(wolverine); */

  final ironman = new Heroe.fromJson(rawJson);

  print(ironman);
}

class Heroe {
  //String? nombre; //con interrogante es opcional 
  //String? poder;
  
  String nombre; //con interrogante es opcional 
  String poder;

  Heroe(
      {required this.nombre, //con required siempre obligas a mandar los datos
      required this.poder});

  Heroe.fromJson(Map<String, String> json) : 
    this.nombre = json['nombre']!,
    this.poder = json['poder'] ?? 'No tiene poder'; //Para evitar si poder no lo envias desde la funcion rawJson
    
  

  String toString() {
    return 'Heroe: nombre : ${this.nombre}, poder: ${this.poder}';
  }
}


//08 Getters y Setters

import 'dart:math' as math;

void main() {
  final cuadrado = new Cuadrado(5);
  
  
  cuadrado.area = 25; //aquí asignamos el 20 al valor del cuadrado
  
  //print ('area: ${cuadrado.lado * cuadrado.lado}');
  print ('area: ${cuadrado.calcularArea()}');
  
  print ('lado: ${cuadrado.lado}');
  
  print ('area get: ${cuadrado.area}'); //aquí llamamos al getter
  
  
  
}


class Cuadrado {
  
  double lado = 0; // lado  * lado  
  
  double get area {
    return this.lado * this.lado; //los getter no pueden recibir argumentos
  }
  
  
  /*
  set area(double valor){
    print('set: $valor');
  }
  */
  
  set area(double valor){
    this.lado = math.sqrt(valor); //Gracias al import de math tenemos sqrt para raiz
  }
  
  
  Cuadrado (double lado):
  this.lado = lado;
  
  //Cuadrado (this.lado); //constructor de forma diferente
  
  double calcularArea(){
    return this.lado * this.lado;  //Metodo para hacerlo de otra forma
  }
  
}

//09 Clases abstractas (que no se pueden instanciar)

void main() {
  //final perro = new Animal(); //Esto no se puede hacer ya que no se puede inicializar

  final perro = new Perro();
  final gato = new Gato();
  
  //perro.emitirSonido();
  
  sonidoAnimal(perro);
  sonidoAnimal(gato);
}

void sonidoAnimal(Animal animal){
  
  animal.emitirSonido();
  
}

abstract class Animal {
  int? patas;
  void emitirSonido();
}


class Perro implements Animal {
  
  int? patas;
  
  void emitirSonido(){
    print ('Guauuuuu');
  }
  
}

class Gato implements Animal{
  int? patas;
  int? cola;
  
  void emitirSonido(){
    print('Miauuuu');
  }
}

//10 Extends

void main() {
  
  final superman = new Heroe ('Clark Kent');
  
  final luthor = new Villano ('Lex Luthor');
  
  print (superman);
  print (luthor);
  
}

abstract class Personaje {
  String? poder;
  String nombre;

  Personaje(this.nombre);

  @override
  String toString() {
    return '$nombre - $poder';
  }
}


class Heroe extends Personaje{
  
  int valentia = 100;
  
  Heroe(String nombre) : super(nombre); //super llama al constructor de la clase que extiende
}


class Villano extends Personaje{
  
  int maldad = 50;
  
  Villano (String nombre):super (nombre);
}

//11 Mixins